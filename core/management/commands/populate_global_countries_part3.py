from django.core.management.base import BaseCommand
from core.models import Country


class Command(BaseCommand):
    help = 'Popula pa√≠ses globais com informa√ß√µes de continente e regi√£o (Parte 3/10)'

    def handle(self, *args, **options):
        # PARTE 3: Mais pa√≠ses da Europa e in√≠cio da √Åsia
        countries_data = [
            # Europa (continua√ß√£o)
            {'name': 'Cro√°cia', 'name_en': 'Croatia', 'name_es': 'Croacia', 'code': 'HR', 'ddi': '+385', 'flag': 'hr', 'continent': 'Europa', 'region': 'Balc√£s'},
            {'name': 'Dinamarca', 'name_en': 'Denmark', 'name_es': 'Dinamarca', 'code': 'DK', 'ddi': '+45', 'flag': 'dk', 'continent': 'Europa', 'region': 'Escandin√°via'},
            {'name': 'Eslov√°quia', 'name_en': 'Slovakia', 'name_es': 'Eslovaquia', 'code': 'SK', 'ddi': '+421', 'flag': 'sk', 'continent': 'Europa', 'region': 'Europa Central'},
            {'name': 'Eslov√™nia', 'name_en': 'Slovenia', 'name_es': 'Eslovenia', 'code': 'SI', 'ddi': '+386', 'flag': 'si', 'continent': 'Europa', 'region': 'Balc√£s'},
            {'name': 'Espanha', 'name_en': 'Spain', 'name_es': 'Espa√±a', 'code': 'ES', 'ddi': '+34', 'flag': 'es', 'continent': 'Europa', 'region': 'Pen√≠nsula Ib√©rica'},
            {'name': 'Est√¥nia', 'name_en': 'Estonia', 'name_es': 'Estonia', 'code': 'EE', 'ddi': '+372', 'flag': 'ee', 'continent': 'Europa', 'region': 'Pa√≠ses B√°lticos'},
            {'name': 'Finl√¢ndia', 'name_en': 'Finland', 'name_es': 'Finlandia', 'code': 'FI', 'ddi': '+358', 'flag': 'fi', 'continent': 'Europa', 'region': 'Escandin√°via'},
            {'name': 'Fran√ßa', 'name_en': 'France', 'name_es': 'Francia', 'code': 'FR', 'ddi': '+33', 'flag': 'fr', 'continent': 'Europa', 'region': 'Europa Ocidental'},
            {'name': 'Gr√©cia', 'name_en': 'Greece', 'name_es': 'Grecia', 'code': 'GR', 'ddi': '+30', 'flag': 'gr', 'continent': 'Europa', 'region': 'Balc√£s'},
            {'name': 'Hungria', 'name_en': 'Hungary', 'name_es': 'Hungr√≠a', 'code': 'HU', 'ddi': '+36', 'flag': 'hu', 'continent': 'Europa', 'region': 'Europa Central'},
            {'name': 'Irlanda', 'name_en': 'Ireland', 'name_es': 'Irlanda', 'code': 'IE', 'ddi': '+353', 'flag': 'ie', 'continent': 'Europa', 'region': 'Ilhas Brit√¢nicas'},
            {'name': 'Isl√¢ndia', 'name_en': 'Iceland', 'name_es': 'Islandia', 'code': 'IS', 'ddi': '+354', 'flag': 'is', 'continent': 'Europa', 'region': 'Escandin√°via'},
            {'name': 'It√°lia', 'name_en': 'Italy', 'name_es': 'Italia', 'code': 'IT', 'ddi': '+39', 'flag': 'it', 'continent': 'Europa', 'region': 'Europa Meridional'},
            {'name': 'Let√¥nia', 'name_en': 'Latvia', 'name_es': 'Letonia', 'code': 'LV', 'ddi': '+371', 'flag': 'lv', 'continent': 'Europa', 'region': 'Pa√≠ses B√°lticos'},
            {'name': 'Liechtenstein', 'name_en': 'Liechtenstein', 'name_es': 'Liechtenstein', 'code': 'LI', 'ddi': '+423', 'flag': 'li', 'continent': 'Europa', 'region': 'Europa Central'},
            {'name': 'Litu√¢nia', 'name_en': 'Lithuania', 'name_es': 'Lituania', 'code': 'LT', 'ddi': '+370', 'flag': 'lt', 'continent': 'Europa', 'region': 'Pa√≠ses B√°lticos'},
            {'name': 'Luxemburgo', 'name_en': 'Luxembourg', 'name_es': 'Luxemburgo', 'code': 'LU', 'ddi': '+352', 'flag': 'lu', 'continent': 'Europa', 'region': 'Europa Ocidental'},
            {'name': 'Maced√¥nia do Norte', 'name_en': 'North Macedonia', 'name_es': 'Macedonia del Norte', 'code': 'MK', 'ddi': '+389', 'flag': 'mk', 'continent': 'Europa', 'region': 'Balc√£s'},
            {'name': 'Malta', 'name_en': 'Malta', 'name_es': 'Malta', 'code': 'MT', 'ddi': '+356', 'flag': 'mt', 'continent': 'Europa', 'region': 'Europa Meridional'},
            {'name': 'Mold√°via', 'name_en': 'Moldova', 'name_es': 'Moldavia', 'code': 'MD', 'ddi': '+373', 'flag': 'md', 'continent': 'Europa', 'region': 'Europa Oriental'},
        ]

        created_count = 0
        updated_count = 0
        
        self.stdout.write('üåç Iniciando popula√ß√£o de pa√≠ses globais (Parte 3/10)...')
        
        for country_data in countries_data:
            try:
                country, created = Country.objects.update_or_create(
                    code=country_data['code'],
                    defaults={
                        'name': country_data['name'],
                        'name_en': country_data['name_en'],
                        'name_es': country_data['name_es'],
                        'ddi': country_data['ddi'],
                        'flag': country_data['flag'],
                        'continent': country_data['continent'],
                        'region': country_data['region'],
                        'is_active': True
                    }
                )
                
                if created:
                    created_count += 1
                    self.stdout.write(f'‚úÖ Pa√≠s criado: {country.name} ({country.continent})')
                else:
                    updated_count += 1
                    self.stdout.write(f'üîÑ Pa√≠s atualizado: {country.name} ({country.continent})')
                    
            except Exception as e:
                self.stdout.write(
                    self.style.ERROR(f'‚ùå Erro ao processar {country_data["name"]}: {str(e)}')
                )

        self.stdout.write('')
        self.stdout.write(
            self.style.SUCCESS(f'üéâ Parte 3 conclu√≠da! Total: {created_count} criados, {updated_count} atualizados')
        )
        self.stdout.write(f'üìä Total de pa√≠ses no sistema: {Country.objects.count()}')
        self.stdout.write('üí° Execute a pr√≥xima parte com: python manage.py populate_global_countries_part4')
