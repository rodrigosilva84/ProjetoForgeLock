#!/usr/bin/env python
import os
import sys
import django

# Configurar Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'forgelock.settings')
django.setup()

from core.models import User, Company, UserCompany

def check_users_companies():
    print("=== VERIFICA√á√ÉO DE USU√ÅRIOS E EMPRESAS ===\n")
    
    # Contar usu√°rios e empresas
    total_users = User.objects.count()
    total_companies = Company.objects.count()
    
    print(f"üìä ESTAT√çSTICAS GERAIS:")
    print(f"   ‚Ä¢ Total de usu√°rios: {total_users}")
    print(f"   ‚Ä¢ Total de empresas: {total_companies}")
    print()
    
    # Usu√°rios com empresas (usando o novo sistema)
    users_with_companies = User.objects.filter(companies__isnull=False).distinct().count()
    users_without_companies = User.objects.filter(companies__isnull=True).count()
    
    print(f"üë• USU√ÅRIOS:")
    print(f"   ‚Ä¢ Com empresas: {users_with_companies}")
    print(f"   ‚Ä¢ Sem empresas: {users_without_companies}")
    print()
    
    # Empresas com usu√°rios (usando o novo sistema)
    companies_with_users = Company.objects.filter(user__isnull=False).distinct().count()
    companies_without_users = Company.objects.filter(user__isnull=True).count()
    
    print(f"üè¢ EMPRESAS:")
    print(f"   ‚Ä¢ Com usu√°rios: {companies_with_users}")
    print(f"   ‚Ä¢ Sem usu√°rios: {companies_without_users}")
    print()
    
    # Detalhes dos usu√°rios
    print(f"üìã DETALHES DOS USU√ÅRIOS:")
    for user in User.objects.all():
        companies_count = user.companies.count()
        companies_list = ", ".join([c.name for c in user.companies.all()])
        print(f"   ‚Ä¢ {user.username} ({user.email}) ‚Üí {companies_count} empresa(s): {companies_list}")
    print()
    
    # Detalhes das empresas
    print(f"üìã DETALHES DAS EMPRESAS:")
    for company in Company.objects.all():
        users_count = company.user_set.count()
        users_list = ", ".join([user.username for user in company.user_set.all()])
        print(f"   ‚Ä¢ {company.name} ‚Üí {users_count} usu√°rio(s): {users_list}")
    print()
    
    # Detalhes dos relacionamentos UserCompany
    print(f"üîó DETALHES DOS RELACIONAMENTOS USER-COMPANY:")
    for uc in UserCompany.objects.all():
        print(f"   ‚Ä¢ {uc.user.username} ‚Üí {uc.company.name} (Role: {uc.get_role_display()})")
    print()
    
    # An√°lise da rela√ß√£o
    print(f"üîç AN√ÅLISE DA RELA√á√ÉO:")
    if total_companies > total_users:
        print(f"   ‚ö†Ô∏è  PROBLEMA: Mais empresas ({total_companies}) que usu√°rios ({total_users})")
        print(f"   üí° SUGEST√ÉO: Empresas sem usu√°rios podem ser removidas ou precisam de usu√°rios")
    elif total_users > total_companies:
        print(f"   ‚ö†Ô∏è  PROBLEMA: Mais usu√°rios ({total_users}) que empresas ({total_companies})")
        print(f"   üí° SUGEST√ÉO: Usu√°rios sem empresa precisam ser associados a uma empresa")
    else:
        print(f"   ‚úÖ RELA√á√ÉO EQUILIBRADA: {total_users} usu√°rios e {total_companies} empresas")
    
    print()
    print("=== FIM DA VERIFICA√á√ÉO ===")

if __name__ == "__main__":
    check_users_companies() 